{"version":3,"file":"12dsynergy-ngx-breadcrumbs.mjs","sources":["../../../../src/lib/services/breadcrumbs.config.ts","../../../../src/lib/utils/breadcrumbs.utils.ts","../../../../src/lib/services/breadcrumbs.resolver.ts","../../../../src/lib/services/breadcrumbs.service.ts","../../../../src/lib/component/breadcrumbs.component.ts","../../../../src/lib/component/breadcrumbs.component.html","../../../../src/lib/provideBreadcrumbs.ts","../../../../src/12dsynergy-ngx-breadcrumbs.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Breadcrumb } from '../models/breadcrumb';\r\n\r\nexport type PostProcessFunction =\r\n  (crumbs: Breadcrumb[]) => Promise<Breadcrumb[]> | Observable<Breadcrumb[]> | Breadcrumb[];\r\n\r\nexport type DistinctKey = keyof Breadcrumb;\r\n\r\nexport interface BreadcrumbsConfig {\r\n  postProcess: PostProcessFunction | null;\r\n  applyDistinctOn: DistinctKey | null;\r\n}\r\n  \r\nexport const BREADCRUMBS_CONFIG = new InjectionToken<BreadcrumbsConfig>('BREADCRUMBS_CONFIG');\r\n","import { Observable, of, from } from 'rxjs';\r\n\r\nexport abstract class BreadcrumbsUtils {\r\n  public static stringFormat(rawTemplate: string, data: any): string {\r\n    const templateRegex = new RegExp('{{[\\\\s]*[a-zA-Z._]+?[\\\\s]*}}', 'g');\r\n\r\n    return rawTemplate.replace(templateRegex, (match) => {\r\n      const keyRegex = new RegExp('([a-zA-Z._]+)', 'g');\r\n      const key = match.match(keyRegex);\r\n\r\n      if (!key || !key.length) {\r\n        return match;\r\n      }\r\n\r\n      const value = BreadcrumbsUtils.leaf(data, key[0]);\r\n\r\n      if (!value) {\r\n        return key[0];\r\n      }\r\n\r\n      return value;\r\n    });\r\n  }\r\n\r\n  public static wrapIntoObservable<T>(value: T | Promise<T> | Observable<T>): Observable<T> {\r\n    if (value instanceof Observable) {\r\n      return value;\r\n    }\r\n\r\n    if (this.isPromise(value)) {\r\n      return from(Promise.resolve(value));\r\n    }\r\n\r\n    return of(value as T);\r\n  }\r\n\r\n  private static isPromise(value: any): boolean {\r\n    return value && (typeof value.then === 'function');\r\n  }\r\n\r\n  /**\r\n   * Access object nested value by giving a path\r\n   *\r\n   * @param obj The object you want to access value from\r\n   * @param path The value path. e.g: `bar.baz`\r\n   * @example\r\n   *   const obj = { foo: { bar: 'Baz' } };\r\n   *   const path = 'foo.bar';\r\n   *   leaf(obj, path) // 'Baz'\r\n   */\r\n  public static leaf(obj: any, path: string) {\r\n    const result = path.split('.').reduce((value, el) => value[el] || {}, obj);\r\n\r\n    return BreadcrumbsUtils.isEmptyObject(result) ? null : result;\r\n  }\r\n\r\n  /**\r\n   * checks whether an object is empty or not\r\n   *\r\n   * @param obj object to extract values from\r\n   * @returns boolean\r\n   */\r\n  public static isEmptyObject(obj): boolean {\r\n    if (typeof obj === 'object' && Object.prototype.toString.call(obj) === '[object Object]') {\r\n      for (const key in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n          return false;\r\n        }\r\n      }\r\n\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n}\r\n","import { ActivatedRouteSnapshot, RouterStateSnapshot, UrlSegment } from '@angular/router';\r\n\r\nimport { Observable, of } from 'rxjs';\r\n\r\nimport { Breadcrumb } from '../models/breadcrumb';\r\nimport { BreadcrumbsUtils } from '../utils/breadcrumbs.utils';\r\n\r\nexport class BreadcrumbsResolver  {\r\n  public resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<Breadcrumb[]> | Promise<Breadcrumb[]> | Breadcrumb[] {\r\n\r\n    const data = route.routeConfig.data;\r\n    const path = this.getFullPath(route);\r\n\r\n    let text = typeof (data.breadcrumbs) === 'string' ? data.breadcrumbs : data.breadcrumbs.text || data.text || path;\r\n    text = BreadcrumbsUtils.stringFormat(text, route.data);\r\n\r\n    const crumbs: Breadcrumb[] = [{\r\n      text,\r\n      path\r\n    }];\r\n\r\n    return of(crumbs);\r\n  }\r\n\r\n  public getFullPath(route: ActivatedRouteSnapshot): string {\r\n    return this.fetchFullPath(route.pathFromRoot);\r\n  }\r\n\r\n  private fetchFullPath(routes: ActivatedRouteSnapshot[]): string {\r\n    return routes.reduce((path, route) => path += this.fetchRelativePath(route.url), '');\r\n  }\r\n\r\n  private fetchRelativePath(urlSegments: UrlSegment[]): string {\r\n    return urlSegments.reduce((path, urlSegment) => path += '/' + urlSegment.path, '');\r\n  }\r\n}\r\n","import { Injectable, Injector, Inject, Optional  } from '@angular/core';\r\nimport { ActivatedRoute, ActivatedRouteSnapshot, NavigationEnd, Router } from '@angular/router';\r\n\r\nimport { Observable, of, BehaviorSubject, concat } from 'rxjs';\r\n\r\nimport { filter, flatMap, distinct, toArray, first, tap } from 'rxjs/operators';\r\n\r\nimport { BREADCRUMBS_CONFIG, BreadcrumbsConfig } from './breadcrumbs.config';\r\nimport { BreadcrumbsResolver } from './breadcrumbs.resolver';\r\nimport { Breadcrumb } from '../models/breadcrumb';\r\nimport { BreadcrumbsUtils } from '../utils/breadcrumbs.utils';\r\n\r\n@Injectable()\r\nexport class BreadcrumbsService {\r\n\r\n  private breadcrumbs = new BehaviorSubject<Breadcrumb[]>([]);\r\n  private defaultResolver = new BreadcrumbsResolver();\r\n\r\n  constructor(\r\n    public route: ActivatedRoute,\r\n    private router: Router,\r\n    @Optional() @Inject(BREADCRUMBS_CONFIG) private config: BreadcrumbsConfig,\r\n    private injector: Injector\r\n  ) {\r\n\r\n\r\n    this.router.events.pipe(\r\n      filter((x) => x instanceof NavigationEnd || x['routerEvent'] instanceof NavigationEnd),\r\n    ).subscribe(() => {\r\n      const routeRoot = router.routerState.snapshot.root;\r\n\r\n      this.resolveCrumbs(routeRoot).pipe(\r\n        flatMap((crumbs: Breadcrumb[]) => crumbs),\r\n        this.config.applyDistinctOn\r\n          ? distinct((crumb: Breadcrumb) => crumb[this.config.applyDistinctOn])\r\n          : tap(),\r\n        toArray(),\r\n        flatMap((crumbs: Breadcrumb[]) => {\r\n          if (this.config.postProcess) {\r\n            const postProcessedCrumb = this.config.postProcess(crumbs);\r\n\r\n            return BreadcrumbsUtils.wrapIntoObservable<Breadcrumb[]>(postProcessedCrumb).pipe(\r\n              first()\r\n            );\r\n          } else {\r\n            return of(crumbs);\r\n          }\r\n        })\r\n      ).subscribe((crumbs: Breadcrumb[]) => {\r\n        this.breadcrumbs.next(crumbs);\r\n      });\r\n    });\r\n  }\r\n\r\n  get crumbs$(): Observable<Breadcrumb[]> {\r\n    return this.breadcrumbs;\r\n  }\r\n\r\n  public getCrumbs(): Observable<Breadcrumb[]> {\r\n    return this.crumbs$;\r\n  }\r\n\r\n  private resolveCrumbs(route: ActivatedRouteSnapshot): Observable<Breadcrumb[]> {\r\n    let crumbs$: Observable<Breadcrumb[]>;\r\n    const data = route.routeConfig && route.routeConfig.data;\r\n\r\n    if (data && data.breadcrumbs) {\r\n      let resolver: BreadcrumbsResolver;\r\n\r\n      if (data.breadcrumbs.prototype instanceof BreadcrumbsResolver) {\r\n        resolver = this.injector.get(data.breadcrumbs);\r\n      } else {\r\n        resolver = this.defaultResolver;\r\n      }\r\n\r\n      const result = resolver.resolve(route, this.router.routerState.snapshot);\r\n\r\n      crumbs$ = BreadcrumbsUtils.wrapIntoObservable<Breadcrumb[]>(result).pipe(\r\n        first()\r\n      );\r\n    } else {\r\n      crumbs$ = of([]);\r\n    }\r\n\r\n    if (route.firstChild) {\r\n      crumbs$ = concat(crumbs$, this.resolveCrumbs(route.firstChild));\r\n    }\r\n\r\n    return crumbs$;\r\n  }\r\n}\r\n","\r\nimport { Component } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule } from '@angular/router';\r\n\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { BreadcrumbsService } from '../services/breadcrumbs.service';\r\nimport { Breadcrumb } from '../models/breadcrumb';\r\n\r\n@Component({\r\n  selector: 'lib-breadcrumbs',\r\n  standalone: true,\r\n  imports: [CommonModule, RouterModule],\r\n  templateUrl: './breadcrumbs.component.html',\r\n  styleUrls: ['./breadcrumbs.component.scss']\r\n})\r\n\r\nexport class BreadcrumbsComponent {\r\n  public crumbs$!: Observable<Breadcrumb[]>;\r\n\r\n  constructor(public breadcrumbsService: BreadcrumbsService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.crumbs$ = this.breadcrumbsService.getCrumbs();\r\n  }\r\n}\r\n","<ol *ngIf=\"crumbs$ | async as crumbs\" class=\"breadcrumbs__container\">\r\n    <li *ngFor=\"let crumb of crumbs; let last = last\"\r\n        [ngClass]=\"{ 'breadcrumbs__item--active': last }\"\r\n        class=\"breadcrumbs__item\">\r\n        <a *ngIf=\"!last\" [routerLink]=\"crumb.path\">{{ crumb.text }}</a>\r\n        <span *ngIf=\"last\">{{ crumb.text }}</span>\r\n    </li>\r\n</ol>","import { Provider } from '@angular/core';\r\nimport { BreadcrumbsService } from './services/breadcrumbs.service';\r\nimport { BREADCRUMBS_CONFIG, BreadcrumbsConfig } from './services/breadcrumbs.config';\r\n\r\nexport function provideBreadcrumbs(config: BreadcrumbsConfig = {\r\n    postProcess: null,\r\n    applyDistinctOn: null\r\n}): Provider[] {\r\n  return [\r\n    {\r\n      provide: BREADCRUMBS_CONFIG,\r\n      useValue: config\r\n    },\r\n    BreadcrumbsService\r\n  ];\r\n}\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1.BreadcrumbsService","i3"],"mappings":"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"}